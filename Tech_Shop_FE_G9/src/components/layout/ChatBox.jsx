import React, { useState } from 'react';
import axios from 'axios';
import '../../assets/css/ChatBox.css';
import { GoogleGenerativeAI } from '@google/generative-ai';

const genAI = new GoogleGenerativeAI('AIzaSyD2JeiwtB4vBgqbhT_G_U-x6aS_Y22jKPM');
const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });

const ChatBox = ({ onClose }) => {
  const [message, setMessage] = useState('');
  const [chat, setChat] = useState([]);
  const [products, setProducts] = useState([]);
  const [expanded, setExpanded] = useState(false);

  // 1. Ph√¢n t√≠ch √Ω ƒë·ªãnh t·ª´ c√¢u h·ªèi ng∆∞·ªùi d√πng
  const getIntent = (msg) => {
    const lower = msg.toLowerCase();
    if (lower.includes("ƒë∆°n h√†ng")) return "track_order";
    if (lower.includes("li√™n h·ªá") || lower.includes("nh√¢n vi√™n")) return "contact_staff";
    if (parsePriceRange(msg)) return "search_by_price";
    if (lower.includes("th√¥ng s·ªë") || lower.includes("c·∫•u h√¨nh")) return "product_specs";
    if (lower.includes("ƒë√°nh gi√°") || lower.includes("rating")) return "top_rated";
    if (lower.includes("b√°n ch·∫°y") || lower.includes("mua nhi·ªÅu")) return "best_seller";
    return "search_general";
  };
  
  // 2. H√†m ph√¢n t√≠ch kho·∫£ng gi√°
  const parsePriceRange = (msg) => {
    const cleaned = msg.toLowerCase().replace(/[^0-9\s]/g, '');
    const digits = cleaned.match(/\d+/g)?.map(Number) || [];

    if (msg.includes('tr√™n') || msg.includes('h∆°n')) return { min: digits[0] * 1_000_000, max: null };
    if (msg.includes('d∆∞·ªõi') || msg.includes('√≠t h∆°n')) return { min: 0, max: digits[0] * 1_000_000 };
    if (msg.includes('t·∫ßm') || msg.includes('kho·∫£ng') || msg.includes('gi·ªØa')) {
      if (digits.length >= 2) return { min: digits[0] * 1_000_000, max: digits[1] * 1_000_000 };
    }
    return null;
  };

  // 3. G·ªçi API l·∫•y to√†n b·ªô s·∫£n ph·∫©m
  const fetchAllProducts = async () => {
    const res = await axios.get(`http://localhost:8080/api/v1/products`);
    return res.data?.response?.values || [];
  };

  // 4. G·ªçi API t√¨m ki·∫øm theo t·ª´ kho√°
  const searchProductsByQuery = async (query) => {
    const res = await axios.get(`http://localhost:8080/api/v1/products/search/${encodeURIComponent(query)}`);
    return res.data?.response?.values || [];
  };

  // 5. G·ªçi Gemini ƒë·ªÉ tr·∫£ l·ªùi t·ª± ƒë·ªông
  const getGeminiResponse = async (question) => {
    const res = await model.generateContent(question);
    return res.response.text();
  };

  // 6. G·ª≠i tin nh·∫Øn
  const sendMessage = async () => {
    if (!message.trim()) return;

    setChat(prev => [...prev, { sender: 'user', text: message }]);

    const intent = getIntent(message);

    try {
      let values = [];

      if (intent === "search_by_price") {
        const priceRange = parsePriceRange(message);
        values = await fetchAllProducts();
        values = values.filter(p =>
          (!priceRange.min || p.price >= priceRange.min) &&
          (!priceRange.max || p.price <= priceRange.max)
        );

        if (values.length > 0) {
          setChat(prev => [...prev, {
            sender: 'bot',
            text: 'üì¶ ƒê√¢y l√† c√°c s·∫£n ph·∫©m ph√π h·ª£p v·ªõi m·ª©c gi√° b·∫°n h·ªèi:'
          }]);
        } else {
          setChat(prev => [...prev, {
            sender: 'bot',
            text: '‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o trong kho·∫£ng gi√° ƒë√≥.'
          }]);
        }

      } else if (intent === "search_general") {
        values = await searchProductsByQuery(message);
        if (values.length > 0) {
          setChat(prev => [...prev, {
            sender: 'bot',
            text: 'üîç D∆∞·ªõi ƒë√¢y l√† k·∫øt qu·∫£ b·∫°n c·∫ßn:'
          }]);
        } else {
          const geminiText = await getGeminiResponse(message);
          setChat(prev => [...prev, {
            sender: 'bot',
            text: `ü§ñ Tr·ª£ l√Ω AI tr·∫£ l·ªùi: ${geminiText}`
          }]);
        }

      } else if (intent === "track_order") {
        setChat(prev => [...prev, {
          sender: 'bot',
          text: 'üì¶ B·∫°n c√≥ th·ªÉ ki·ªÉm tra ƒë∆°n h√†ng t·∫°i trang "ƒê∆°n h√†ng c·ªßa t√¥i" ho·∫∑c nh·∫≠p m√£ ƒë∆°n h√†ng ƒë·ªÉ tra c·ª©u.'
        }]);
      } else if (intent === "contact_staff") {
        setChat(prev => [...prev, {
          sender: 'bot',
          text: 'üìû Vui l√≤ng li√™n h·ªá nh√¢n vi√™n CSKH qua s·ªë 1800 0000 ho·∫∑c chat tr·ª±c ti·∫øp t·∫°i ƒë√¢y.'
        }]);
      } else if (intent === "product_specs") {
        values = await searchProductsByQuery(message);
        if (values.length > 0) {
          setChat(prev => [...prev, {
            sender: 'bot',
            text: `üìã Th√¥ng s·ªë s·∫£n ph·∫©m "${values[0].productName}": ${values[0].specs || 'Hi·ªán ch∆∞a c√≥ th√¥ng tin chi ti·∫øt.'}`
          }]);
        } else {
          const geminiText = await getGeminiResponse(message);
          setChat(prev => [...prev, { sender: 'bot', text: `ü§ñ Tr·ª£ l√Ω AI: ${geminiText}` }]);
        }
      
      } else if (intent === "top_rated") {
        values = await fetchAllProducts();
        values = values.sort((a, b) => (b.rating || 0) - (a.rating || 0)).slice(0, 5);
        setChat(prev => [...prev, { sender: 'bot', text: 'üåü ƒê√¢y l√† c√°c s·∫£n ph·∫©m ƒë∆∞·ª£c ƒë√°nh gi√° cao nh·∫•t:' }]);
        setProducts(values);

      } else if (intent === "best_seller") {
        values = await fetchAllProducts();
        values = values.sort((a, b) => (b.sold || 0) - (a.sold || 0)).slice(0, 5);
        setChat(prev => [...prev, { sender: 'bot', text: 'üî• ƒê√¢y l√† c√°c s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t:' }]);
        setProducts(values);
      }

      setProducts(values);
    } catch (err) {
      console.error('ChatBox error:', err);
      setChat(prev => [...prev, { sender: 'bot', text: '‚ùó L·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau.' }]);
    }

    setMessage('');
  };

  return (
    <div className="chat-box">
      <div className="chat-header">
        H·ªó tr·ª£ s·∫£n ph·∫©m
        <button className="chat-close" onClick={onClose}>√ó</button>
      </div>

      {!expanded ? (
        <div className="chat-body">
          <p>üëã Xin ch√†o! M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?</p>
          <button className="chat-button" onClick={() => setExpanded(true)}>H·ªèi v·ªÅ s·∫£n ph·∫©m</button>
          <button className="chat-button" onClick={() => {
            setChat(prev => [...prev, { sender: 'user', text: 'T√¥i mu·ªën ki·ªÉm tra ƒë∆°n h√†ng' }]);
            setExpanded(true);
            setMessage('T√¥i mu·ªën ki·ªÉm tra ƒë∆°n h√†ng');
            setTimeout(() => sendMessage(), 300);
          }}>Ki·ªÉm tra ƒë∆°n h√†ng</button>
          <button className="chat-button" onClick={() => {
            setChat(prev => [...prev, { sender: 'user', text: 'T√¥i mu·ªën li√™n h·ªá nh√¢n vi√™n' }]);
            setExpanded(true);
            setMessage('T√¥i mu·ªën li√™n h·ªá nh√¢n vi√™n');
            setTimeout(() => sendMessage(), 300);
          }}>Li√™n h·ªá nh√¢n vi√™n</button>
        </div>
      ) : (
        <>
          <div className="chat-log">
            {chat.map((msg, idx) => (
              <div key={idx} className={`chat-msg ${msg.sender}`}>
                {msg.text}
              </div>
            ))}
          </div>

          <div className="chat-input">
            <input
              type="text"
              placeholder="H·ªèi v·ªÅ s·∫£n ph·∫©m..."
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              onKeyDown={(e) => e.key === 'Enter' && sendMessage()}
            />
            <button onClick={sendMessage}>G·ª≠i</button>
          </div>

          {products.length > 0 && (
            <div className="chat-products">
              <h4>S·∫£n ph·∫©m g·ª£i √Ω:</h4>
              <ul>
                {products.map(prod => (
                  <li key={prod.id}>
                    <img src={prod.thumbnail} alt={prod.productName} />
                    <div>
                      <strong>{prod.productName}</strong><br />
                      {prod.price.toLocaleString()} VND
                    </div>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </>
      )}
    </div>
  );
};

export default ChatBox;
