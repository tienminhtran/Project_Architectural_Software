import React, { useState } from "react";
import { BsPencil, BsTrash } from "react-icons/bs";
import { Link, useNavigate } from "react-router-dom";
// N√†y  d√πng ƒë·ªÉ m√≥c API l·∫•y danh s√°ch category
import useCategories from "../../hooks/useCategorie"; 
import ReactPaginate from "react-paginate";

const CategoryPage = () => {
  // Khai b√°o m·∫•y c√°i bi·∫øn state ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu
  const [showFilters, setShowFilters] = useState(false); // C√°i n√†y ƒë·ªÉ ·∫©n/hi·ªán b·ªô l·ªçc
  const [search, setSearch] = useState(""); 
  const [category, setCategory] = useState(""); // Bi·∫øn ƒë·ªÉ ch·ªçn category
  const [subCategory, setSubCategory] = useState(""); // Bi·∫øn ƒë·ªÉ ch·ªçn sub-category
  const [brand, setBrand] = useState(""); // Bi·∫øn ch·ªçn brand
  const [selectedRows, setSelectedRows] = useState([]); // C√°i n√†y l∆∞u m·∫•y h√†ng ƒëang ƒë∆∞·ª£c ch·ªçn
  const [currentPage, setCurrentPage] = useState(0); // L∆∞u s·ªë trang hi·ªán t·∫°i
  const pageSize = 10; // S·ªë item tr√™n m·ªói trang

  // G·ªçi API l·∫•y danh s√°ch category theo ph√¢n trang
  const { categories_paging, deleteCategory } = useCategories(currentPage, pageSize);
  const { data, isLoading, isError, error } = categories_paging;
  const categories = data?.values || []; // L·∫•y danh s√°ch category t·ª´ API

  if (isLoading) return <p>Loading categories...</p>; // ƒêang t·∫£i th√¨ hi·ªán ch·ªØ n√†y
  if (isError) return <p>Error: {error.message}</p>; // N·∫øu l·ªói th√¨ b√°o l·ªói

  // H√†m x·ª≠ l√Ω khi b·∫•m qua trang m·ªõi
  const handlePageChange = (selected) => {
    setCurrentPage(selected.selected);
  };

  // H√†m ch·ªçn t·ª´ng h√†ng
  const handleSelectRow = (id) => {
    setSelectedRows((prevSelected) =>
      prevSelected.includes(id)
        ? prevSelected.filter((rowId) => rowId !== id)
        : [...prevSelected, id]
    );
  };

  // H√†m ch·ªçn t·∫•t c·∫£ h√†ng
  const handleSelectAll = () => {
    if (selectedRows.length === categories.length) {
      setSelectedRows([]); // N·∫øu ƒë√£ ch·ªçn h·∫øt r·ªìi th√¨ b·ªè ch·ªçn
    } else {
      setSelectedRows(categories.map((item) => item.id)); // Ch·ªçn h·∫øt lu√¥n
    }
  };

  
 /**
  * X·ª≠ l√Ω khi b·∫•m v√†o n√∫t s·ª≠a
  * @param {*} voucher 
  * x√≥a
  */
  const handleDelete = (categoryid) => {
    if (window.confirm("Are you sure you want to delete?")) {
      deleteCategory(categoryid);
    }


  };
  return (
    <div className="page-wrapper">
      {/* Header c·ªßa trang */}
      <div className="page-header d-flex justify-content-between align-items-center">
        <div className="page-title">
          <h3>Product Category List</h3>
          <p>View/Search Category</p>
        </div>
        <div className="header-action">
          {/* N√∫t ƒë·ªÉ qua trang th√™m category m·ªõi */}
          <Link
            to="/common/AddCategoryPage"
            className="btn btn-warning text-white fw-bold rounded px-4 py-2 text-decoration-none"
          >
            Create Category
          </Link>
        </div>
      </div>

      {/* B·ªô l·ªçc danh m·ª•c */}
      <div className="filter-container">
        <button className="filter-toggle" onClick={() => setShowFilters(!showFilters)}>
          {showFilters ? "‚úñ" : "üîç Filter"}
        </button>

        {showFilters && (
          <div className="filters">
            {/* √î nh·∫≠p t√¨m ki·∫øm */}
            <input
              type="text"
              placeholder="Search..."
              value={search}
              onChange={(e) => setSearch(e.target.value)}
            />
            {/* Ch·ªçn category */}
            <select value={category} onChange={(e) => setCategory(e.target.value)}>
              <option value="">Choose Category</option>
              <option value="laptops">Laptops</option>
              <option value="accessories">Accessories</option>
            </select>
            {/* Ch·ªçn sub-category */}
            <select value={subCategory} onChange={(e) => setSubCategory(e.target.value)}>
              <option value="">Choose Sub Category</option>
              <option value="gaming">Gaming</option>
              <option value="business">Business</option>
            </select>
            {/* Ch·ªçn brand */}
            <select value={brand} onChange={(e) => setBrand(e.target.value)}>
              <option value="">Choose Brand</option>
              <option value="dell">Dell</option>
              <option value="hp">HP</option>
              <option value="acer">Acer</option>
              <option value="lenovo">Lenovo</option>
            </select>
          </div>
        )}
      </div>

      {/* B·∫£ng danh s√°ch category */}
      <table className="table table-responsive">
        <thead>
          <tr>
            <th>
              {/* √î checkbox ch·ªçn t·∫•t c·∫£ */}
              <input
                type="checkbox"
                checked={selectedRows.length === categories.length}
                onChange={handleSelectAll}
                className="form-check-input"
              />
            </th>
            <th>Category Name</th>
            <th>Active</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
          {categories.map((item) => (
            <tr key={item.id}>
              <td>
                {/* √î checkbox ch·ªçn t·ª´ng h√†ng */}
                <input
                  type="checkbox"
                  checked={selectedRows.includes(item.id)}
                  onChange={() => handleSelectRow(item.id)}
                  className="form-check-input"
                />
              </td>
              <td>{item.name}</td>
              <td>{item.active ? "‚úÖ" : "‚ùå"}</td>
              <td className="action">
                <div className="d-flex gap-3">
                  {/* N√∫t s·ª≠a */}
                  <BsPencil className="text-secondary fs-5" role="button" />
                  {/* N√∫t x√≥a */}
                  <BsTrash className="text-danger fs-5" role="button" onClick={() => handleDelete(item.id)}/>
                  </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* Ph√¢n trang */}
      <ReactPaginate
        previousLabel={"‚Üê"}
        nextLabel={"‚Üí"}
        breakLabel={"..."}
        pageCount={data.totalPages} // T·ªïng s·ªë trang t·ª´ API tr·∫£ v·ªÅ
        onPageChange={handlePageChange} // Khi b·∫•m qua trang kh√°c
        containerClassName={"pagination d-flex justify-content-end"} // Class c·ªßa div b·ªçc ph√¢n trang
        pageClassName={"page-item"} // Class c·ªßa t·ª´ng trang
        pageLinkClassName={"page-link"} // Class c·ªßa th·∫ª a t·ª´ng trang
        previousClassName={"page-item"} // Class c·ªßa n√∫t Previous
        previousLinkClassName={"page-link"} // Class c·ªßa th·∫ª a c·ªßa Previous
        nextClassName={"page-item"} // Class c·ªßa n√∫t Next
        nextLinkClassName={"page-link"} // Class c·ªßa th·∫ª a c·ªßa Next
        breakClassName={"page-item"} 
        breakLinkClassName={"page-link"}
        activeClassName={"active"} // Class c·ªßa trang hi·ªán t·∫°i
      />
    </div>
  );
};

export default CategoryPage;
